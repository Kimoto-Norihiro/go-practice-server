// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/Kimoto-Norihiro/go-practice-server/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m_2 *MockRepository) CreateMember(m model.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMember", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockRepositoryMockRecorder) CreateMember(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockRepository)(nil).CreateMember), m)
}

// DeleteMember mocks base method.
func (m *MockRepository) DeleteMember(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockRepositoryMockRecorder) DeleteMember(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockRepository)(nil).DeleteMember), id)
}

// ShowMember mocks base method.
func (m *MockRepository) ShowMember(id uint) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowMember", id)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowMember indicates an expected call of ShowMember.
func (mr *MockRepositoryMockRecorder) ShowMember(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowMember", reflect.TypeOf((*MockRepository)(nil).ShowMember), id)
}

// UpdateMember mocks base method.
func (m_2 *MockRepository) UpdateMember(id uint, m model.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMember", id, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockRepositoryMockRecorder) UpdateMember(id, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockRepository)(nil).UpdateMember), id, m)
}
