// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/Kimoto-Norihiro/go-practice-server/model"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m_2 *MockUseCase) CreateMember(c *gin.Context, m model.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMember", c, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockUseCaseMockRecorder) CreateMember(c, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockUseCase)(nil).CreateMember), c, m)
}

// DeleteMember mocks base method.
func (m *MockUseCase) DeleteMember(c *gin.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockUseCaseMockRecorder) DeleteMember(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockUseCase)(nil).DeleteMember), c, id)
}

// ShowMember mocks base method.
func (m *MockUseCase) ShowMember(c *gin.Context, id uint) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowMember", c, id)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowMember indicates an expected call of ShowMember.
func (mr *MockUseCaseMockRecorder) ShowMember(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowMember", reflect.TypeOf((*MockUseCase)(nil).ShowMember), c, id)
}

// UpdateMember mocks base method.
func (m_2 *MockUseCase) UpdateMember(c *gin.Context, id uint, m model.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMember", c, id, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockUseCaseMockRecorder) UpdateMember(c, id, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockUseCase)(nil).UpdateMember), c, id, m)
}
